// <auto-generated />
using System;
using System.Collections.Generic;
using Marisa.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Marisa.Infra.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250626154258_CreateTableProductComments")]
    partial class CreateTableProductComments
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Marisa.Domain.Entities.Address", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<string>("AddressNickname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address_nickname");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address_type");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("Complement")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("complement");

                    b.Property<bool?>("MainAddress")
                        .IsRequired()
                        .HasColumnType("boolean")
                        .HasColumnName("main_address");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("neighborhood");

                    b.Property<int?>("Number")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<string>("RecipientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("recipient_name");

                    b.Property<string>("ReferencePoint")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("reference_point");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("street");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("pk_address");

                    b.HasIndex("UserId");

                    b.ToTable("tb_marisa_address", (string)null);
                });

            modelBuilder.Entity("Marisa.Domain.Entities.Product", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("category");

                    b.Property<long?>("Code")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("code");

                    b.Property<List<string>>("Colors")
                        .IsRequired()
                        .HasColumnType("varchar[]")
                        .HasColumnName("colors");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("DiscountPercentage")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("discount_percentage");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<double?>("InstallmentPrice")
                        .IsRequired()
                        .HasColumnType("double precision")
                        .HasColumnName("installment_price");

                    b.Property<int?>("InstallmentTimesCreditCard")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("installment_times_credit_card");

                    b.Property<int?>("InstallmentTimesMarisaCard")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("installment_times_marisa_card");

                    b.Property<double?>("Price")
                        .IsRequired()
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<double?>("PriceDiscounted")
                        .IsRequired()
                        .HasColumnType("double precision")
                        .HasColumnName("price_discounted");

                    b.Property<int?>("QuantityAvailable")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("quantity_available");

                    b.Property<List<string>>("SizesAvailable")
                        .IsRequired()
                        .HasColumnType("varchar[]")
                        .HasColumnName("sizes_available");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_product");

                    b.ToTable("tb_marisa_products", (string)null);
                });

            modelBuilder.Entity("Marisa.Domain.Entities.ProductAdditionalInfo", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("product_additional_info_id");

                    b.Property<string>("AboutProduct")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("about_product");

                    b.Property<string>("Composition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("composition");

                    b.Property<List<string>>("ImgsSecondary")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("imgs_secondary");

                    b.Property<Guid?>("ProductId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("ShippingInformation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("shipping_information");

                    b.HasKey("Id")
                        .HasName("pk_product_additional_info");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_additional_info_product_id");

                    b.ToTable("tb_product_additional_info", (string)null);
                });

            modelBuilder.Entity("Marisa.Domain.Entities.ProductComment", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("product_comments_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("ImgProduct")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("img_product");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ProductId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<bool?>("RecommendProduct")
                        .IsRequired()
                        .HasColumnType("boolean")
                        .HasColumnName("recommend_product");

                    b.Property<int?>("StarQuantity")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("star_quantity");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_product_comments");

                    b.HasIndex("ProductId");

                    b.ToTable("tb_product_comments", (string)null);
                });

            modelBuilder.Entity("Marisa.Domain.Entities.User", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("BirthDate")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("CellPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("cell_phone");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("cpf");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(325)
                        .HasColumnType("character varying(325)")
                        .HasColumnName("email");

                    b.Property<char?>("Gender")
                        .IsRequired()
                        .HasColumnType("character(1)")
                        .HasColumnName("gender");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("telephone");

                    b.Property<string>("UserImage")
                        .HasColumnType("text")
                        .HasColumnName("user_image");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("tb_marisa_users", (string)null);
                });

            modelBuilder.Entity("Marisa.Domain.Entities.UserProductLike", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_product_likes_id");

                    b.Property<DateTime?>("LikedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("liked_at");

                    b.Property<Guid?>("ProductId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_product_likes");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("tb_user_product_likes", (string)null);
                });

            modelBuilder.Entity("Marisa.Domain.Entities.Address", b =>
                {
                    b.HasOne("Marisa.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_address_user");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Marisa.Domain.Entities.ProductAdditionalInfo", b =>
                {
                    b.HasOne("Marisa.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Marisa.Domain.Entities.ProductComment", b =>
                {
                    b.HasOne("Marisa.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Marisa.Domain.Entities.UserProductLike", b =>
                {
                    b.HasOne("Marisa.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Marisa.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Marisa.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
